//////////////////////////////////////////////////////////////////////////////////
// File Name: 		L1_inst_cache.sv
// Module Name:		Level 1 Instruction Cache	
// Project Name:	RVS192
// Author:	 		hungbk99
// University:     	DP S192	HCMUT
//////////////////////////////////////////////////////////////////////////////////

`include"RVS192_user_define.h"
import 	RVS192_package::*;
import	RVS192_user_parameters::*;
module	IL1_Cache
(
	output	logic						ICC_halt,
	output 	logic 	[INST_LENGTH-1:0]	inst_fetch,
	output 	logic 						update_req,
	input 	logic 						update_res,
	input 	cache_update_type 			IL2_out, 
	input 	[PC_LENGTH-1:0]				pc,
	input 								clk,
	input 								rst_n
);

//================================================================================	
//	Internal Signals
	parameter	TAG_LENGTH = INST_LENGTH-BYTE_OFFSET-WORD_OFFSET-$clog2(ICACHE_LINE);
//	L1 Instruction Cache
	logic	[$clog2(ICACHE_LINE)-1:0]					IL1_index,
														IL1_up_index;	
	logic 	[INST_LENGTH-1:0]							IL1_inst,
														IL1_inst_way[ICACHE_WAY];
	logic 	[$clog2(CACHE_BLOCK_SIZE/4)-1:0]			word_sel;
	logic 	[$clog2(ICACHE_WAY)-1:0]					way_sel;	
	logic 	[ICACHE_WAY-1:0]							IL1_update;
	
	logic 	[CACHE_BLOCK_SIZE*8-1:0]					ICRAM_out [ICACHE_WAY],
														ICRAM_in [ICACHE_WAY];	
	logic 	[CACHE_BLOCK_SIZE*4-1:0]					ICRAM_out1 [ICACHE_WAY],
														ICRAM_out2 [ICACHE_WAY],	
														ICRAM_in1 [ICACHE_WAY],
														ICRAM_in2 [ICACHE_WAY];
//	logic	[$clog2(ICACHE_WAY)-1:0]					way_up;
	
	logic 	[TAG_LENGTH-1:0]							tag_pc,
														tag_pc_up,
														TAG_icache	[ICACHE_WAY]; 
	logic 	[ICACHE_WAY-1:0]							icache_way_hit;
	logic												icache_hit;
	logic	[ICACHE_WAY-1:0]							icache_valid, 
														replace_way,
														replace_way_new;

	`ifdef	INST_VICTIM_CACHE
		logic											update_vc,
														vc_hit;		
		logic 	[CACHE_BLOCK_SIZE*8-1:0]				line_up_vc;
		logic 	[TAG_LENGTH-1:0]						tag_up_vc;			
		logic 	[INST_LENGTH-1:0]						VC_inst;
	`endif	
	
	
	logic 	[PC_LENGTH-1:0]								pc_up;
	logic 												update_icc;
//================================================================================
//================================================================================
//	L1 Instruction Cache
	genvar 	way;
	
	assign	IL1_index = pc[BYTE_OFFSET+WORD_OFFSET+$clog2(ICACHE_LINE)-1:BYTE_OFFSET+WORD_OFFSET];
	assign 	IL1_up_index = pc_up[BYTE_OFFSET+WORD_OFFSET+$clog2(ICACHE_LINE)-1:BYTE_OFFSET+WORD_OFFSET];
	assign 	tag_pc = pc[INST_LENGTH-1:BYTE_OFFSET+WORD_OFFSET+$clog2(ICACHE_LINE)];
	assign 	tag_pc_up = pc_up[INST_LENGTH-1:BYTE_OFFSET+WORD_OFFSET+$clog2(ICACHE_LINE)];
	assign 	word_sel = pc[BYTE_OFFSET+WORD_OFFSET-1:BYTE_OFFSET];
	
//	INST AND TAG
	generate			 	
	for(way = 0; way < ICACHE_WAY; way++) 
		begin:	way_gen	
/*
		logic 	[ICACHE_LINE-1:0]	IC_VALID;
		
		always_ff @(posedge clk or negedge rst_n)
		begin
			if(!rst_n)
				IC_VALID <= '0;
			else if(replace_way[way] == 1'b1)
				IC_VALID[IL1_up_index] <= 1'b1;
		end
		
		assign 	icache_valid[way] = IC_VALID[IL1_index];
*/
		Valid_Set
		#(
		.VALID_LINE(ICACHE_LINE)
		)
		ICACHE_VALID
		(
		.valid(icache_valid[way]),	
		.index(IL1_index),
		.replace_indexIL1_up_index(),	
		.replace(replace_way[way]),
		.clk(clk),
		.rst_n(rst_n)
		);		

		SinglePort_SRAM	ICRAM
		(
		.data_out(ICRAM_out[way]),
		.data_in(ICRAM_in[way]),
		.w_addr(IL1_up_index),
		.r_addr(IL1_index),
		.wen(replace_way[way]),
		.clk(clk)
		);	defparam	ICRAM.SRAM_LENGTH = CACHE_BLOCK_SIZE*8;
			defparam	ICRAM.SRAM_DEPTH = ICACHE_LINE;
		
		assign	{ICRAM_out2[way], ICRAM_out1[way]} = ICRAM_out[way];
		
		Configurable_Mux_Write	mux_write1
		(
		.data_out(ICRAM_in1[way]),
		.data_in(IL2_out.w1_update),
		.data_fb(ICRAM_out1[way]),
		.sample_req(IL2_out.addr1_update)
		);	defparam	mux_write1.SLOT = CACHE_BLOCK_SIZE/8;
		
		Configurable_Mux_Write	mux_write2
		(
		.data_out(ICRAM_in2[way]),
		.data_in(IL2_out.w2_update),
		.data_fb(ICRAM_out2[way]),
		.sample_req(IL2_out.addr2_update)
		);	defparam	mux_write2.SLOT = CACHE_BLOCK_SIZE/8;
		
		assign	ICRAM_in[way] = {ICRAM_in2[way], ICRAM_in1[way]};

		Configurable_Multiplexer	mux_read_way
		(
		.data_out(IL1_inst_way[way]),
		.data_in(ICRAM_out[way]),
		.sel(word_sel)
		);	defparam	mux_read_way.INPUT_SLOT = CACHE_BLOCK_SIZE/4;
		
		SinglePort_SRAM	ITAG
		(
		.data_out(TAG_icache[way]),
		.data_in(tag_pc_up),
		.w_addr(IL1_up_index),
		.r_addr(IL1_index),
		.wen(replace_way[way]),
		.clk(clk)
		);	defparam	ITAG.SRAM_LENGTH = TAG_LENGTH;
			defparam	ITAG.SRAM_DEPTH = ICACHE_LINE;
		
		assign	icache_way_hit[way] = (TAG_icache[way] == tag_pc) && icache_valid[way];	
		
		end		
	endgenerate

//	IL1 inst ouput	
	always_comb	begin
		IL1_inst = 'x;
		for(int i = 0; i < ICACHE_WAY; i++)
		begin
		if(icache_way_hit == (1<<i))
			IL1_inst = IL1_inst_way[i];
		end
	end

//	Replacement

	`ifdef	ICACHE_ALRU
	ALRU	ALRU_U
	(
	.replace_way(replace_way_new),	
	.replace_index(IL1_index),
	.valid(icache_valid),
	.hit(icache_way_hit),
	.clk(clk)
	);
	`elsif	ICACHE_RANDOM
	RANDOM	
	#(
	.RANDOM_BIT(ICACHE_WAY),
	.RANDOM_LINE(ICACHE_LINE))
	RANDOM_U
	(
	.replace_way(replace_way_new),	
	.replace_index(IL1_index),
	.valid(icache_valid),
	.hit(icache_way_hit),
	.clk(clk),
	.rst_n(rst_n)
	);
	`endif

//================================================================================	
//	Inst Victim Cache
	`ifdef	INST_VICTIM_CACHE	
		
		always_comb	begin
			line_up_vc = 'x;
			tag_up_vc = 'x;
			for(int i = 0; i < ICACHE_WAY; i++)
			begin
			if(replace_way[i] == 1'b1)
			begin
				line_up_vc = ICRAM_out[i];
				tag_up_vc = TAG_icache[i];
			end
			end
		end	
		
		Victim_Cache	IVC
		(
		.data_out(VC_inst),
		.vc_hit(vc_hit),	
		.data_in(line_up_vc),
		.tag_in({tag_up_vc, IL1_index}),
		.addr(pc),	
		.wen(update_vc),
		.rst_n(rst_n),
		.clk(clk)
		);	defparam	IVC.SLOT = CACHE_BLOCK_SIZE/4;
			defparam	IVC.VCTAG_LENGTH = TAG_LENGTH + $clog2(ICACHE_LINE);
			defparam	IVC.SRAM_DEPTH = 4;
	`endif
	
//================================================================================	
//	Inst Victim Cache	
	assign  icache_hit = |icache_way_hit;
	assign	inst = icache_hit ? IL1_inst : (vc_hit ? VC_inst : '0);
	
	always_ff @(posedge clk)
	begin
		if(~(|icache_way_hit))
			pc_up <= pc;
	end

//================================================================================	
//	Inst Cache Controller		
	
	IL1_Controller
	(
	.*
	);
	
	
endmodule		
